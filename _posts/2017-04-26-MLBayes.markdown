---
layout:     post
title:      "机器学习游玩记第三站"
subtitle:   "基于概率论的分类方法"
date:       2017-04-26 17:00:00
author:     "林佩勤"
header-img: "img/post-bg.jpg"
tags:
    - 机器学习
    - Python
---

> 大显神通的朴素贝叶斯分类器


## 前言

之前两篇文章都是就“数据实例属于哪一类”给出一个明确的答案，但分类器有时会产生错误答案，这时可以要求分类器给出一个最优的类别猜测结果，同时给出相应的估计值。要实现这个要求，就必须用到贝叶斯分类器。

---

## 正文

书本中给出的例子是文本分类，首先第一步就是从文本中构建词向量，具体如下：

```python
def loadDataSet():
    postingList = [['my', 'dog', 'has', 'flea', 'problems', 'help', 'please'],
                   ['maybe', 'not', 'take', 'him', 'to', 'dog', 'park', 'stupid'],
                   ['my', 'dalmation', 'is', 'so', 'cute', 'I', 'love', 'him'],
                   ['stop', 'posting', 'stupid', 'worthless', 'garbage'],
                   ['mr', 'licks', 'ate', 'my', 'steak', 'how', 'to', 'stop', 'him'],
                   ['quit', 'buying', 'worthless', 'dog', 'food', 'stupid']]
    classVec = [0, 1, 0, 1, 0, 1]
    return postingList, classVec


def createVocabList(dataSet):
    vocabSet = set([])
    for document in dataSet:
        vocabSet = vocabSet | set(document)
    return list(vocabSet)


def setOfWords2Vec(vocabList, inputSet):
    returnVec = [0]*len(vocabList)
    for word in inputSet:
        if word in vocabList:
            returnVec[vocabList.index(word)] = 1
        else:
            print("the word: {word} is not in my Vocabulary!".format(word=word))
    return returnVec

if __name__ == '__main__':
    listOPosts, listClasses = loadDataSet()
    myVocabList = createVocabList(listOPosts)
    print(myVocabList)
    print(setOfWords2Vec(myVocabList, listOPosts[0]))
```

loadDataSet函数创建了一些实验样本，该函数返回的第一个变量是进行词条分割后的文档集合，第二个变量是一个类别标签的集合；之后的createVocabList函数则用来创建一个包含在所有文档中出现的不重复词的列表，这里用到的是无序的set数据类型；获取到词汇表后，就可以使用setOfWords2Vec函数了，该函数的输入参数为词汇表及某个文档，输出的是文档向量，向量的每一元素为1或0，分别表示词汇表中的单词在输入文档中是否出现。

准备好数据后，我们就可以从词向量计算概率，进行朴素贝叶斯分类器的训练，具体如下：

```python
from numpy import *
import bayes1


def trainNB0(trainMatrix, trainCategory):
    numTrainDocs = len(trainMatrix)
    numWords = len(trainMatrix[0])
    pAbusive = sum(trainCategory)/float(numTrainDocs)
    p0Num = ones(numWords)
    p1Num = ones(numWords)
    p0Denom = 2.0
    p1Denom = 2.0
    for i in range(numTrainDocs):
        if trainCategory[i] == 1:
            p1Num += trainMatrix[i]
            p1Denom += sum(trainMatrix[i])
        else:
            p0Num += trainMatrix[i]
            p0Denom += sum(trainMatrix[i])
    p1Vect = log(p1Num/p1Denom)
    p0Vect = log(p0Num/p0Denom)
    return p0Vect, p1Vect, pAbusive

if __name__ == '__main__':
    listOPosts, listClasses = bayes1.loadDataSet()
    myVocabList = bayes1.createVocabList(listOPosts)
    print(myVocabList)
    trainMat = []
    for postinDoc in listOPosts:
        trainMat.append(bayes1.setOfWords2Vec(myVocabList, postinDoc))
    p0V, p1V, pAb = trainNB0(trainMat, listClasses)
    print(pAb)
    print(p0V)
    print(p1V)
```

trainNB0就是对应的朴素贝叶斯分类器训练函数，它的输入参数为文档矩阵trainMatrix，以及由每篇文档类别标签所构成的向量trainCategory。函数首先计算侮辱性文档（class=1）的概率，即P(1)。因为这是个二类分类问题，所以可通过P(1)得到P(0)。对于多于两类的分类问题，则需对代码稍作修改。值得一提的是，这里使用ones函数是为了避免其中一个概率值为0所带来的的不良影响。接着函数遍历训练文档集，一旦某一词语（侮辱性或正常词语）在某一文档中出现，则该词对应的个数（p1Num或p0Num）就加1，且在所有文档中，该文档总词数也加1。最后，对每个元素除以该类别中的总词数并取对数（取对数是为了解决下溢出的问题，尽管取对数导致取值不同，但由于以及在同区域增减，故不影响结果）。函数总共返回两个向量和一个概率，概率pAb即侮辱性文档的比例，向量p0V和p1V的第i个元素则分别表示词汇表中第i个元素在类别0和类别1中出现的概率。

最后便可以对算法进行简单的测试了，具体如下：

```python
from numpy import *
import bayes1
import bayes2


def classifyNB(vec2Classify, p0Vec, p1Vec, pClass1):
    p1 = sum(vec2Classify * p1Vec) + log(pClass1)
    p0 = sum(vec2Classify * p0Vec) + log(1.0 - pClass1)
    if p1 > p0:
        return 1
    else:
        return 0


def bagOfWords2VecMN(vocabList, inputSet):
    returnVec = [0]*len(vocabList)
    for word in inputSet:
        if word in vocabList:
            returnVec[vocabList.index(word)] += 1
    return returnVec


def testingNB():
    listOPosts, listClasses = bayes1.loadDataSet()
    myVocabList = bayes1.createVocabList(listOPosts)
    trainMat = []
    for postinDoc in listOPosts:
        trainMat.append(bayes1.setOfWords2Vec(myVocabList, postinDoc))
    p0V, p1V, pAb = bayes2.trainNB0(array(trainMat), array(listClasses))
    testEntry = ['love', 'my', 'dalmation']
    thisDoc = array(bayes1.setOfWords2Vec(myVocabList, testEntry))
    print(testEntry, 'classified as: ', classifyNB(thisDoc, p0V, p1V, pAb))
    testEntry = ['stupid', 'garbage']
    thisDoc = array(bayes1.setOfWords2Vec(myVocabList, testEntry))
    print(testEntry, 'classified as: ', classifyNB(thisDoc, p0V, p1V, pAb))

if __name__ == '__main__':
    testingNB()
```

classifyNB函数有四个输入，分别是要分类的向量以及使用函数trainNB0计算得到的三个概率，函数使用NumPy的数组来计算两个向量相乘的结果，然后将词汇表中所有词的对应值相加，然后将该值加到类别的对数概率上，最后比较类别的概率返回大概率对应的类别标签。

## 后记

实际上，在原书还有从词集模型到词袋模型的扩展以及过滤垃圾邮件和从个人广告中获取区域倾向两个例子，但为了避免一次性学太多东西导致学习效果不佳，故等日后再做扩展。
