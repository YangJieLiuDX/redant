---
layout:     post
title:      "设计模式之备忘录模式"
subtitle:   "设计模式里的后悔药"
date:       2017-06-01 16:00:00
author:     "林佩勤"
header-img: "img/post-bg.jpg"
tags:
    - 设计模式
---

> 我想回到过去了
>


## 前言

编程的时候，我们经常需要保存对象的中间状态，当需要的时候，可以恢复到这个状态。在这种情况下，我们就要用到备忘录模式了

---

## 正文

**什么是备忘录模式**

备忘录模式主要包括以下角色：

- 发起人：记录当前时刻的内部状态，负责定义哪些属于备份范围的状态，负责创建和恢复备忘录数据
- 备忘录：负责存储发起人对象的内部状态，在需要的时候提供发起人需要的内部状态
- 管理角色：对备忘录进行管理，保存和提供备忘录

**怎么使用备忘录模式**

***步骤一：创建Originator***

```java
package com.memento;

public class Originator {
    private String state = "";

    public String getState() {
        return state;
    }
    public void setState(String state) {
        this.state = state;
    }

	public Memento createMemento(){
        return new Memento(this.state);
    }
    public void restoreMemento(Memento memento){
        this.setState(memento.getState());
    }
}
```

***步骤二：创建Memento***

```java
package com.memento;

public class Memento {
	private String state = "";

	public Memento(String state) {
		this.state = state;
	}

	public String getState() {
		return state;
	}

	public void setState(String state) {
		this.state = state;
	}
}
```

***步骤三：创建Caretaker***

```java
package com.memento;

public class Caretaker {
	private Memento memento;

	public Memento getMemento() {
		return memento;
	}

	public void setMemento(Memento memento) {
		this.memento = memento;
	}
}
```

***步骤四：创建Client***

```java
package com.memento;

public class Client {
	public static void main(String[] args) {
		Originator originator = new Originator();
		originator.setState("状态1");
		System.out.println("初始状态:" + originator.getState());
		Caretaker caretaker = new Caretaker();
		caretaker.setMemento(originator.createMemento());
		originator.setState("状态2");
		System.out.println("改变后状态:" + originator.getState());
		originator.restoreMemento(caretaker.getMemento());
		System.out.println("恢复后状态:" + originator.getState());
	}
}
```

**备忘录模式有哪些优缺点**

***优点***

- 当发起人角色中的状态改变时，有可能这是个错误的改变，我们使用备忘录模式就可以把这个错误的改变还原
- 备份的状态是保存在发起人角色之外的，这样，发起人角色就不需要对各个备份的状态进行管理

***缺点***

- 在实际应用中，备忘录模式都是多状态和多备份的，发起人的状态需要存储到备忘录对象中，对资源的消耗比较严重


**备忘录模式适用于什么环境**

- 需要保存一个对象在某一个时刻的状态或部分状态

- 如果用一个接口来让其他对象得到这些状态，将会暴露对象的实现细节并破坏对象的封装性，一个对象不希望外界直接访问其内部状态，通过负责人可以间接访问其内部状态



## 后记

在实际运用中，多状态多备份备忘录会更加常见，感兴趣的朋友也可以去学一下
