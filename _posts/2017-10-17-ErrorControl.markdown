---
layout:     post
title:      "计算机网络之差错控制"
subtitle:   "差错控制的常见方法"
date:       2017-10-17 20:00:00
author:     "林佩勤"
header-img: "img/post-bg.jpg"
tags:
    - 计算机网络
---

> 保证信息准确无误地送到目的地
>


## 前言

在计算机网络中，差错控制十分重要，所以今天就让我们一起来学习一下差错控制的方法。

---

## 正文

#### 差错控制类型

差错控制主要分为两种：自动重传请求ARQ和前向纠错FEC。前者接收端检测出差错时，就设法通知发送端重传，直至收到正确码字；后者不但能发现差错，还能确定错误位置并进行纠正。因此，差错控制又分为检错编码（Error-Detecting Code）和纠错编码（Error-Correcting Code）。

#### 检错编码

检错编码都是采用冗余编码技术。其核心思想是在有效数据被发送前，先按某种关系附加上一定的冗余位，构成一个符合某一规则的码字后再发送。由于检错编码无法确定哪一位出错，所以它不能进行错误校正。发生错误时必须扔掉全部的数据，然后从头开始传输数据。在噪声很多的媒介上成功传输数据可能要花费很长的时间，甚至根本无法实现。常见的检错编码有累加和校验码、奇偶校验码和循环冗余码，这里主要讲后两者。

##### 奇偶校验码（Parity Check Code）

奇偶校验是根据被传输的二进制数据中1的个数是奇数或偶数来进行校验。采用奇数的称为奇校验，反之称为偶校验。采用何种校验是事先规定好的。通常专门设置一个奇偶校验位，用它使这组数据中1的个数为奇数或偶数。若用奇校验，则当接收端收到这组数据时，校验1的个数是否为奇数，从而确定传输数据的正确性。

奇偶校验分为垂直奇偶校验、水平奇偶校验以及水平垂直奇偶校验。其中前两种检验为单向奇偶校验，它只能检验奇数位错误，而水平垂直奇偶检验的校验能力最高，它只有当错误位数为4的倍数才可能无法检测错误。

##### 循环冗余码（Cyclic Redundancy Code）

循环冗余吗（CRC）又叫多项式码（Polynomial Code），其本质是模2除法的余数。采用的除数不同，得到的循环冗余码也不一样。通常CRC的除数用生成多项式来表示。

如果设计生成多项式得当，那么循环冗余码则变得十分有效，那么我们应该怎样来设计生成多项式 g(x) 呢？

假设加上循环冗余码后传输的码字对应的多项式为 b(x) ，而在传输的过程中出现了错误，对应多项式为 e(x) ，则最终接收端接收到的数据为 r(x) = b(x) + e(x) ，如果 e(x) 刚好是生成多项式 g(x) 与某个数的乘积，那么 r(x) % g(x) 和 b(x) % g(x) 的结果将会一样，这样子将检测不出错误。所以我们要选择好 g(x) 以保证 e(x) 尽可能不是 g(x) 与某个数的乘积，我们分以下几种情况讨论：

1. 1位错误：此时 e(x) = x^i^ 。因此只要 g(x) 多于一项，就可以保证 e(x) 无法被整除
2. 2位错误：此时 e(x) = x^i^ + x^j^  = x^i^ (x^j-i^ + 1) ，其中 j > i 。当 g(x) 多于一项时，就可以保证 x^i^ 无法被整除，而当 g(x) 是本原多项式（primitive polynomial，具体概念请自行百度）时，它就不能被 x^m+1^ 整除，其中 m < 2^n-k-1^ ，因此我们需要保证码字长度小于 2^n-k-1^ （n为最终传输码字长度，k为原始码字长度）
3. 奇数位错误：为了检测出奇数位错误，我们要保证 g(x) 必须含有 x + 1 这个因式，所以得当的 g(x) 应为 (x + 1) * p(x) ，其中 p(x) 为本原多项式

根据以上的理论，我们引出几个标准CRC生成多项式：

1. CRC-8：x^8^ + x^2^ + x + 1，应用实例有ATM
2. CRC-16：x^16^ + x^15^ + x^2^ + 1，应用实例有Bisync
3. CCITT-16：x^16^ + x^12^ + x^5^ + 1，应用实例有HDLC，XMODEM，V.41
4. CCITT-32：x^32^ + x^26^ + x^23^ + x^22^+ x^16^ + x^12^ + x^11^ + x^10^ + x^8^ + x^7^ + x^5^ + x^4^ + x^2^ + x + 1，应用实例有IEEE 802，DoD，V.42

## 后记

差错控制对于信息传输十分重要，对于常见的差错控制方法，我们要牢固掌握。