---
layout:     post
title:      "设计模式之代理模式"
subtitle:   "最后一个结构型模式"
date:       2017-04-26 23:00:00
author:     "林佩勤"
header-img: "img/post-bg.jpg"
tags:
    - 设计模式
---

> 设计模式也有代理！！！
>


## 前言

在现实生活中，我们经常碰到代理这个名词，实际上，在计算机领域，代理这个名词也经常被用到，比如设计模式中的代理模式。

---

## 正文

**什么是代理模式**

当客户不想或不能直接引用一个对象时，可以通过代理实现间接引用，这就是代理模式，代理模式包括以下角色：

- Subject：抽象主题角色
- Proxy：代理主题角色
- RealSubject：真实主题角色

**怎么使用代理模式**

***步骤一：创建Subject***

```java
package com.proxy;

public interface Image {
	void display();
}
```

***步骤二：创建RealSubject***

```java
package com.proxy;

public class RealImage implements Image {

	private String fileName;

	public RealImage(String fileName) {
		this.fileName = fileName;
		loadFromDisk(fileName);
	}

	@Override
	public void display() {
		System.out.println("Displaying " + fileName);
	}

	private void loadFromDisk(String fileName) {
		System.out.println("Loading " + fileName);
	}
	
}
```

***步骤三：创建Proxy***

```java
package com.proxy;

public class ProxyImage implements Image {

	private RealImage realImage;
	private String fileName;

	public ProxyImage(String fileName) {
		this.fileName = fileName;
	}

	@Override
	public void display() {
		if (realImage == null) {
			realImage = new RealImage(fileName);
		}
		realImage.display();
	}
	
}
```

***步骤四：创建Client***

```java
package com.proxy;

public class Client {

	public static void main(String[] args) {
		Image image = new ProxyImage("test.jpg");
		image.display();
		image.display();
	}

}
```

**代理模式有哪些优缺点**

***优点***

- 协调调用者和被调用者，一定程度降低了系统耦合度
- 远程代理使得客户端可以访问远程机器上的对象，远程机器可能具有更好的计算性能与处理速度，可以快速响应并处理客户端请求
- 虚拟代理通过使用一个小对象来代表一个大对象，可以减少系统资源消耗，对系统进行优化并提高运行速度
- 保护代理可以控制对真实对象的使用权限

***缺点***

- 由于在客户端和真实主题之间增加了代理对象，因此有些类型的代理模式可能会造成请求的处理速度变慢
- 实现代理模式需要额外的工作，有些代理模式的实现非常复杂


**代理模式适用于什么环境**

- 远程代理：为一个位于不同地址空间的对象提供一个本地代理对象
- 虚拟代理：如果要创建一个资源消耗大的对象，先创建一个消耗较小的对象表示，真实对象只在需要时才被创建
- Copy-on-Write代理：虚拟代理的一种，把复制操作延迟到客户端真正需要时。一般来说，对象的深克隆是开销较大，Copy-on-Write代理可以让操作延迟，只有对象被用到时才克隆
- 保护代理：控制对对象的访问，可以给不同用户提供不同级别的使用权限
- 缓冲代理：为某一目标操作的结果提供临时存储空间，以便多个客户端共享这些结果
- 防火墙代理：保护目标不让恶意用户接近
- 同步化代理：使几个用户能够同时使用一个对象而没有冲突
- 智能引用代理：当对象被引用时，提供额外的操作，如将此对象被调用的次数记录下来等


## 后记

代理模式十分多样，运用领域也相当广泛，值得静下心来好好学习。
