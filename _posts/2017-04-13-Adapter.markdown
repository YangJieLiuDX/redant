---
layout:     post
title:      "设计模式之适配器模式"
subtitle:   "邂逅结构型模式"
date:       2017-04-13 15:00:00
author:     "林佩勤"
header-img: "img/post-bg.jpg"
tags:
    - 设计模式
---

> 将一个类的接口转换成客户希望的另外一个接口。Adapter 模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。——Gang of Four
>


## 前言

从这篇文章开始，我们一起来认识一下结构型模式，本篇讲解的是其中之一的适配器模式。

---

## 正文

**什么是适配器模式**

适配器模式将一个类的接口适配成用户所期待的。一个适配器通常允许因为接口不兼容而不能一起工作的类能够在一起工作，做法是将类自己的接口包裹在一个已存在的类中。

**怎么使用适配器模式**

适配器模式有类的适配器模式和对象的适配器模式两种不同的形式。首先我们先来实现一下类适配器：

***步骤一：创建Target***

```java
package com.adapter;

public interface Target {
	
	// 使用的接口
	public void request();
	
	// 已经存在的接口，这个接口需要适配
	public void specificRequest();
	
}
```

***步骤二：创建Adaptee***

```java
package com.adapter;

public class Adaptee {

	// 原本存在的方法
	public void specificRequest() {
		System.out.println("specific request");
	}

}
```

***步骤三：创建Adapter***

```java
package com.adapter;

public class Adapter extends Adaptee implements Target {

	@Override
	public void request() {
		System.out.println("request");
	}

}
```

***步骤四：创建Client***

```java
package com.adapter;

public class Client {
	public static void main(String[] args) {
		Target adapter = new Adapter();
		adapter.request();
	}
}
```

这样子，我们就实现了类适配器，但Java遵循单继承，所以类适配器往往受到限制，在面向对象设计原则中，有条叫做组合/聚合复用原则，指尽可能使用组合和聚合达到复用目的而不是继承，所以一般推荐用对象适配器。其具体实现如下：

***步骤一：创建Target和Adaptee***

这个步骤与上面的步骤一和步骤二基本一致，所以这里省略。

***步骤二：创建Adapter***

```java
package com.adapter;

public class Adapter implements Target {

	private Adaptee adaptee;

	public Adapter(Adaptee adaptee){
		this.adaptee = adaptee;
	}
	
	@Override
	public void request() { 
        System.out.println("request");
	}
	
	@Override
	public void specificRequest() {
		this.adaptee.specificRequest();
	}

}
```

***步骤三：创建Client***

```java
package com.adapter;

public class Client {
	public static void main(String[] args) {
		Adaptee adaptee = new Adaptee();
		Target adapter = new Adapter(adaptee);
		adapter.request();
	}
}
```

**适配器模式有哪些优缺点**

***优点***

- 将目标类和适配者类解耦，通过引入一个适配器类来重用现有的适配者类，而无须修改原有代码
- 增加了类的透明性和复用性，将具体实现封装在适配者类中，对于客户端类来说是透明的，且提高了适配者的复用性
- 灵活性和扩展性好，通过配置文件可以更换适配器，也可以在不修改代码的基础上增加新适配器类，符合开闭原则
- 类适配器模式优点：由于适配器类是适配者类子类，故可在适配器类中置换适配者方法，使得适配器灵活性更强
- 对象适配器模式优点：一个对象适配器可把多个不同适配者适配到同一目标，即可把适配者类及其子类都适配

***缺点***

- 类适配器模式缺点：对于不支持多继承的语言，一次只能适配一个适配者类，而且目标抽象类只能为抽象类，不能为具体类，使用有一定局限性，不能将一个适配者类和它的子类都适配到目标接口
- 对象适配器模式缺点：与类适配器模式相比，要想置换适配者类的方法不容易。如果一定要置换，只好先做一个适配者类的子类，将适配者类方法置换掉，再把适配者类子类当做真正适配者适配

**适配器模式适用于什么环境**

- 系统需要使用现有类，而这些类的接口不符合系统需要
- 想建立一个可重复使用的类，用于与一些彼此之间没太大关联的一些类，包括一些可能将来引进的类一起工作

**有哪些例子属于适配器模式**

- JDBC



## 后记

个人认为，适配器的运用还是蛮广的，所以我们一定要很好的掌握。
