---
layout:     post
title:      "设计模式之状态模式"
subtitle:   "处理对象的多种状态及其相互转换"
date:       2017-06-01 16:40:00
author:     "林佩勤"
header-img: "img/post-bg.jpg"
tags:
    - 设计模式
---

> 运动是绝对的，静止是相对的
>


## 前言

万物都有多种状态，同样的，对象也有可能有多种状态，为了处理好对象的多种状态以及它们之间的相互转换，我们引入了状态模式

---

## 正文

**什么是状态模式**

状态模式用于解决系统中复杂对象的状态转换以及不同状态下行为的封装问题。当系统中某个对象存在多个状态，这些状态之间可以进行转换，而且对象在不同状态下行为不相同时可以使用状态模式。状态模式包含如下几个角色：

- Context：环境类。维护一个抽象状态类实例，这个实例定义当前状态，在具体实现时，它是一个State子类的对象
- State：抽象状态类。定义一个接口以封装与环境类的一个特定状态相关的行为
- ConcreteState：具体状态类。抽象状态类的子类，实现一个与环境类的一个状态相关的行为

**怎么使用状态模式**

***步骤一：创建Context***

```java
package com.state;

public class Context {
	private State state;

	public Context() {
		state = null;
	}

	public void setState(State state) {
		this.state = state;
	}

	public State getState() {
		return state;
	}
}
```

***步骤二：创建State***

```java
package com.state;

public interface State {
	public void doAction(Context context);
}
```

***步骤三：创建ConcreteState***

StartState类：

```java
package com.state;

public class StartState implements State {

	public void doAction(Context context) {
		System.out.println("Player is in start state");
		context.setState(this);
	}

	public String toString() {
		return "Start State";
	}
}
```

StopState类：

```java
package com.state;

public class StopState implements State {

	public void doAction(Context context) {
		System.out.println("Player is in stop state");
		context.setState(this);
	}

	public String toString() {
		return "Stop State";
	}
}
```

***步骤四：创建Client***

```java
package com.state;

public class Client {
	public static void main(String[] args) {
		Context context = new Context();

		StartState startState = new StartState();
		startState.doAction(context);

		System.out.println(context.getState().toString());

		StopState stopState = new StopState();
		stopState.doAction(context);

		System.out.println(context.getState().toString());
	}
}
```

**状态模式有哪些优缺点**

***优点***

- 封装了转换规则
- 枚举可能的状态，在枚举状态之前需要确定状态种类
- 将所有与某个状态有关的行为放到一个类中，且可以方便地增加新的状态，只需要改变对象状态即可改变对象行为
- 允许状态转换逻辑与状态对象合成一体，而不是某一个巨大的条件语句块
- 可以让多个环境对象共享一个状态对象，从而减少系统中对象的个数


***缺点***

- 状态模式的使用必然会增加系统类和对象的个数
- 状态模式的结构与实现都较为复杂，如果使用不当将导致程序结构和代码的混乱
- 状态模式对"开闭原则"的支持并不太好，对于可以切换状态的状态模式，增加新的状态类需要修改那些负责状态转换的源代码，否则无法切换到新增状态，而且修改某个状态类的行为也需修改对应类的源代码


**状态模式适用于什么环境**

- 行为随状态改变而改变的场景
- 条件、分支语句的代替者


## 后记

蛮有趣的状态模式，你是不是喜欢上了，赶快动手写代码吧！
