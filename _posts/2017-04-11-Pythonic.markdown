---
layout:     post
title:      "一起来让Python代码变得Pythonic"
subtitle:   "当Python更加Python"
date:       2017-04-11 20:30:00
author:     "林佩勤"
header-img: "img/post-bg.jpg"
tags:
    - Python
---

> 写出不被”鄙视“的Python代码


## 前言

Pythonic是一个经常被Python程序员提及的关键词，它用来形容符合Python风格的代码，让我们的代码变得更加直观、简洁、可读，甚至能提高我们代码的运行效率。这篇文章就让我们通过一些例子来学学Pythonic。

---

## 正文

本文开头，我们先介绍一个Python库——pep8，它可以用来检测我们的代码是否符合Pythonic风格，用pip可以直接安装，要看一个文件是否符合Pythonic，只要运行`pep8 --first MyPython.py`就可以了。通过这种方式，我们可以迅速地习惯Pythonic这种Python编程风格。接下来我们再看一些比较直观的例子：

**交换两个值**

```python
# 常规写法
t = a
a = b
b = t

# 糟糕写法
a = a ^ b
b = a ^ b
a = b ^ a

# Pythonic写法
a, b = b, a
```

**迭代输出序号**

```python
# 常规写法
index = 0
for item in iterable:
    print index, item
    index += 1

# Pythonic写法
for index, item in enumerate(iterable):
    print index, item

index = 100
for item in iterable:
    print index, item
    index += 1

# Pythonic写法
for index, item in enumerate(iterable, 100):
    print index, item
```

**同时迭代**

```python
# 常规写法
for pos in xrange(len(iterable1)):
    item1 = iterable1[pos]
    item2 = iterable2[pos]
    print item1, item2

# Pythonic写法
for item1, item2 in zip(iterable1, iterable2):
    print item1, item2
```

**求幂**

```python
# 常规写法
x = pow(2, 20)

# Pythonic写法
x = 2 ** 20
```

**级联比较**

```python
# 常规写法
a, b, c = 1, 2, 3
if a < b and b < c:
    pass

# Pythonic写法
a, b, c = 1, 2, 3
if a < b < c:
    pass
```

**字符串格式化**

```python
# 常规写法
name = 'xxx'
age = 21
string = 'My name is %s and I am %d years old' % (name, age)

# Pythonic写法
string = 'My name is {name} and I am {age} years old.'.format(name='xxx', age=21)
```

## 后记

事实上，关于Pythonic的知识有很多，大家只有通过不断的编程，才能有对它更深的理解和掌握。
