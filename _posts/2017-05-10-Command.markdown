---
layout:     post
title:      "设计模式之命令模式"
subtitle:   "解耦接受者和发送者"
date:       2017-05-10 19:30:00
author:     "林佩勤"
header-img: "img/post-bg.jpg"
tags:
    - 设计模式
---

> "Just do it"
>


## 前言

命令模式是一种简单实用非常普遍的设计模式，今天就让我们一起来学习一下它！

---

## 正文

**什么是命令模式**

命令模式将一个请求封装成一个对象，从而使你可用不同的请求对客户进行参数化，它对请求排队或记录请求日志，以及支持可撤销的操作。命令模式包括以下角色：

- Command：抽象类，声明需要执行的命令，一般要对外公布一个execute方法用来执行命令
- ConcreteCommand：Command类的实现类，对抽象类中声明的方法进行实现
- Invoker：调用者，负责调用命令
- Receiver：接收者，负责接收命令并执行命令
- Client：最终的客户端调用类

**怎么使用命令模式**

***步骤一：创建Receiver***

```java
package com.command;

public class Receiver {

    public void action(){
        System.out.println("执行操作");
    }
    
}
```

***步骤二：创建Command***

```java
package com.command;

public interface Command {
	void execute();
}
```

***步骤三：创建ConcreteCommand***

```java
package com.command;

public class ConcreteCommand implements Command {

	private Receiver receiver = null;

	public ConcreteCommand(Receiver receiver) {
		this.receiver = receiver;
	}

	@Override
	public void execute() {
		receiver.action();
	}

}
```

***步骤四：创建Invoker***

```java
package com.command;

public class Invoker {

	private Command command = null;

	public Invoker(Command command) {
		this.command = command;
	}

	public void action() {
		command.execute();
	}

}
```

***步骤五：创建Client***

```java
package com.command;

public class Client {

	public static void main(String[] args) {
		Receiver receiver = new Receiver();
		Command command = new ConcreteCommand(receiver);
		Invoker invoker = new Invoker(command);
		invoker.action();
	}

}
```

**命令模式有哪些优缺点**

***优点***

- 降低系统耦合度
- 新的命令可以很容易地加入到系统中
- 可以比较容易地设计一个命令队列和宏命令（组合命令）
- 可以方便地实现对请求的Undo和Redo

***缺点***

- 可能会导致某些系统有过多具体命令类。因为每个命令都需要一个具体命令类，因此系统可能需要大量具体命令类



**代理模式适用于什么环境**

- 系统需要将请求调用者和请求接收者解耦，使调用者和接收者不直接交互
- 系统需要在不同时间指定请求、将请求排队和执行请求
- 系统需要支持命令的撤销(Undo)操作和恢复(Redo)操作
- 系统需要将一组操作组合在一起，即支持宏命令


## 后记

正如开头所说的一样，这个模式简单且实用，所以我们必须好好掌握。
