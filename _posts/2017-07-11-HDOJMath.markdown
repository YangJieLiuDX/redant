---
layout:     post
title:      "杭电OJ刷题记之数学篇"
subtitle:   "数学是科学之母"
date:       2017-07-11 15:00:00
author:     "林佩勤"
header-img: "img/post-bg.jpg"
tags:
    - 数据结构与算法
---

> 永远都不要忽略数学的重要性
>


## 前言

数学在计算机科学中扮演者重要的角色。在早期的学习中，我们可能很难认识到数学的重要性，但随着学习的深入，我们会越来越发现数学给编程带来的巨大帮助。

---

## 正文

**阶乘位数**

***题目来源***

[HDOJ 1018 Big Number](http://acm.hdu.edu.cn/showproblem.php?pid=1018)

***题目分析***

这道问题表面上可以进行暴力求解，即计算出一个数的阶乘之后再计算该阶乘的位数。但实际上这是很不现实的做法，首先它耗时较久，其次计算机需要通过字符串而不是整型变量来存储计算的阶乘值，这将大大增大编程难度。这个时候，数学就体现作用了，斯特林公式就可以解决这个问题。对于这道题，我们不需要记住那些复杂的公式，我们只要知道一个数n的阶乘位数为log10(n!)的值取整加1，即`阶乘位数 = log10(1) + log10(2) + … + log10(n) + 1`。利用这条公式，我们就可以写出我们的程序了。这里需要注意的是，为了计算的精确度，sum和遍历的 i 都必须为double类型，不然会出现WA的情况。

***实现代码***

```c++
#include<stdio.h>
#include<math.h>

int main() {
    int n, num;
    double sum;
    scanf("%d", &n);
    while(n--) {
        scanf("%d", &num);
        sum = 1;
        for(double i = 1; i <= num; i++) {
            sum += log10(i);
        }
        printf("%d\n", (int)sum);
    }
    return 0;
}
```
**伊格和公主（三）**

***题目来源***

[HDOJ 1028 Ignatius and the Princess III](http://acm.hdu.edu.cn/showproblem.php?pid=1028)

***题目分析***

这题属于母函数（也称生成函数）里面比较简单和基础的一个题目了，但由于笔者之前接触较少，所以也是查阅了一些资料方能解决。首先我们先要了解[母函数和排列组合之间的关系](http://www.cnblogs.com/dolphin0520/archive/2012/11/07/2755080.html)，然后我们就可以根据题意得到我们的母函数，接着在模拟多项式的展开就可以了。关于这类问题，网上已经有固定的模板作为参考了，具体可参考[这篇文章](http://www.cnblogs.com/syxchina/archive/2010/09/19/2197360.html)。本文也是借鉴了这篇文章里面的模板，也方便大家理解。

***实现代码***

```c++
#include<stdio.h>
#define lmax 10000

// c1是用来存放展开式的系数的，而c2则是用来计算时保存的，
// 用下标来控制每一项的位置，比如 c2[3] 就是 x^3 的系数。
// 用c1保存，然后在计算时用c2来保存变化的值。

int c1[lmax + 1], c2[lmax + 1];

int main() {
    int n, i, j, k ;
    // 计算的方法还是模拟手动运算，一个括号一个括号的计算，从前往后
    while(scanf("%d", &n) == 1) {
        // 对于 1+x+x^2+x^3+ 他们所有的系数都是 1
        // 而c2全部被初始化为0是因为以后要用到 c2[i] += x ;
        for (i = 0; i <= n; i++) {
            c1[i] = 1;
            c2[i] = 0;
        }
        //第一层循环是一共有n个小括号，而刚才已经算过一个了，所以是从2 到 n
        for (i = 2; i <= n; i++) {
            // 第二层循环是把每一个小括号里面的每一项，都要与前一个小括号里面的每一项计算。
            for (j = 0; j <= n; j++)
                // 第三层小括号是要控制每一项里面X增加的比例，这就是为什么要用 k+= i ;
                for (k = 0; k + j <= n; k += i) {
                    // 合并同类项，他们的系数要加在一起，所以是加法，
                    c2[ j + k] += c1[ j];
                }
            // 刷新一下数据，继续下一次计算，就是下一个括号里面的每一项。
            for ( j = 0; j <= n; j++ ) {
                c1[j] = c2[j] ;
                c2[j] = 0 ;
            }
        }
        printf("%d\n", c1[n]);
    }
    return 0;
}
```

**求N^N最高位**

***题目来源***

[HDOJ 1060 Leftmost Digit](http://acm.hdu.edu.cn/showproblem.php?pid=1060)

***题目分析***

这道题数据量这么大，所以绝对不可能直接模拟解决。实际上，这道题用数学方法一下子就可以解决了，具体如下：

1. 令M = N^N^
2. 两边取对数，log10M = N\*log10N，得到M = 10^N*log10N^
3. 令N*log10N = a（整数部分） + b（小数部分），则M = 10^a+b^ = 10^a^ * 10^b^，由于10的整数次幂的最高位必定是1，所以M的最高位只需考虑10^b^
4. 最后对10^b^取整，输出取整的这个数就行了（因为0<=b<1，所以1<=10^b^<=10。对其取整，得到的一定是个位数，也就是所求的数）

***实现代码***

```c
#include<stdio.h>
#include<math.h>

int main() {
    int count, n;
    scanf("%d", &count);
    while(count--) {
        scanf("%d", &n);
        double d = n * log10(n);
        d = d - (long long)d;
        d = pow(10, d);
        printf("%d\n", (int)d);
    }
    return 0;
}
```

## 后记

数学与计算机科学是相辅相成的。如果一个程序员过度轻视数学，那么他注定会被以后的编程生涯中吃到苦头。
