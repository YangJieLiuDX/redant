---
layout:     post
title:      "设计模式之策略模式"
subtitle:   "算法的封装与切换"
date:       2017-06-01 17:10:00
author:     "林佩勤"
header-img: "img/post-bg.jpg"
tags:
    - 设计模式
---

> 条条大路通罗马，选择最适合的一条
>


## 前言

在软件开发中，我们也常常会遇到类似的情况，实现某一个功能有多条途径，每一条途径对应一种算法，此时我们可以使用一种设计模式来实现灵活地选择解决途径，也能够方便地增加新的解决途径，那就是策略模式。

---

## 正文

**什么是策略模式**

策略模式中，我们创建表示各种策略的对象和一个行为随着策略对象改变而改变的context对象。策略对象改变context对象的执行算法。策略模式包含如下几个角色：

- Context：环境类。使用算法的角色，它在解决某个问题时可以采用多种策略。在环境类中维持一个对抽象策略类的引用实例，用于定义所采用的策略
- Strategy：抽象策略类。环境类通过抽象策略类中声明的方法在运行时调用具体策略类中实现的算法
- ConcreteStrategy：具体策略类。实现了在抽象策略类中声明的算法

**怎么使用策略模式**

***步骤一：创建Context***

```java
package com.stratedy;

public class Context {
	private Strategy strategy;

	public Context(Strategy strategy) {
		this.strategy = strategy;
	}

	public int executeStrategy(int num1, int num2) {
		return strategy.doOperation(num1, num2);
	}
}
```

***步骤二：创建Strategy***

```java
package com.stratedy;

public interface Strategy {
	public int doOperation(int num1, int num2);
}
```

***步骤三：创建ConcreteStrategy***

OperationAdd类：

```java
package com.stratedy;

public class OperationAdd implements Strategy {
	@Override
	public int doOperation(int num1, int num2) {
		return num1 + num2;
	}
}
```

OperationSubstract类：

```java
package com.stratedy;

public class OperationSubstract implements Strategy {
	@Override
	public int doOperation(int num1, int num2) {
		return num1 - num2;
	}
}
```

OperationMultiply类：

```java
package com.stratedy;

public class OperationMultiply implements Strategy {
	@Override
	public int doOperation(int num1, int num2) {
		return num1 * num2;
	}
}
```

***步骤四：创建Client***

```java
package com.stratedy;

public class Client {
	public static void main(String[] args) {
		Context context = new Context(new OperationAdd());
		System.out.println("10 + 5 = " + context.executeStrategy(10, 5));

		context = new Context(new OperationSubstract());
		System.out.println("10 - 5 = " + context.executeStrategy(10, 5));

		context = new Context(new OperationMultiply());
		System.out.println("10 * 5 = " + context.executeStrategy(10, 5));
	}
}
```

**策略模式有哪些优缺点**

***优点***

- 算法可以自由切换
- 避免使用多重条件判断
- 扩展性良好


***缺点***

- 策略类会增多
- 所有策略类都需要对外暴露


**策略模式适用于什么环境**

- 如果在一个系统里面有许多类，它们之间的区别仅在于它们的行为，那么使用策略模式可以动态地让一个对象在许多行为中选择一种行为
- 一个系统需要动态地在几种算法中选择一种
- 如果一个对象有很多的行为，如果不用恰当的模式，这些行为就只好使用多重的条件选择语句来实现


## 后记

策略算法是不是很有用呢？但必须得注意，当系统的策略过多的时候，最好采用混合模式，避免策略类膨胀。
